{{ $_ := set . "Values" (fromYaml (include "common.tplvalues.render" ( dict "value" .Values "context" $ ))) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "g4f.fullname" . }}
  labels:
{{ include "g4f.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "g4f.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "g4f.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "g4f.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: secrets
          secret:
            secretName: {{ include "g4f.fullname" . }}
            optional: true
            defaultMode: 0755
        - name: wireguard-config
          emptyDir: {}
      initContainers:
        - name: "wireguard-template-replacement"
          image: "busybox"
          command: [ "sh", "-c", "ENI=$(ip route get 8.8.8.8 | grep 8.8.8.8 | awk '{print $5}'); sed \"s/ENI/$ENI/g\" /etc/wireguard-secret/wg0.conf.template > /etc/wireguard/wg0.conf; chmod 400 /etc/wireguard/wg0.conf" ]
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard/
            - name: secrets
              mountPath: /etc/wireguard-secret/
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: secrets
              mountPath: /app/secrets
              readOnly: true
          ports:
            - containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /
              port: 80
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 60
            failureThreshold: 5
          envFrom:
            - secretRef:
                name: {{ include "g4f.fullname" . }}-env
                optional: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: "wireguard"
          image: "linuxserver/wireguard:latest"
          ports:
            - containerPort: 51820
          env:
            - name: "TZ"
              value: "Europe/Berlin"
            # Keep the PEERS environment variable to force server mode
            - name: "PEERS"
              value: "example"
          volumeMounts:
            - name: wireguard-config
              mountPath: /etc/wireguard/
              readOnly: true
            - name: secrets
              mountPath: /etc/wireguard-secret/
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
